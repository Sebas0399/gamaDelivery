Execution;Time in ms in Scope #608 of FollowingPaths_model(0) (of display map);Invocations in Scope #608 of FollowingPaths_model(0) (of display map);Time in ms in Scope #611 of city_rain(0) (of display chart_display);Invocations in Scope #611 of city_rain(0) (of display chart_display);Time in ms in Scope #601 (in ExperimentPlan);Invocations in Scope #601 (in ExperimentPlan);Time in ms in Scope #605 of FollowingPaths_model(0);Invocations in Scope #605 of FollowingPaths_model(0);Time in ms in Scope #610 of FollowingPaths_model(0) (in java2D display );Invocations in Scope #610 of FollowingPaths_model(0) (in java2D display );Time in ms in Scope #602 of city_rain(0);Invocations in Scope #602 of city_rain(0)
model FollowingPaths

global ;;;;;;;;;;;;
list<FollowingPaths_model> peers ;;;;;;;0;1;;;;
-199;;;;;;;;;;;;
experiment host ;;;;;;;0;1;;;;
-29;;;;;;;;;;;;
experiment experiment ;;;;;;;0;1;;;;
-31;;;;;;;;;;;;
FollowingPaths_model world ;;;;;;;0;1;;;;
-27;;;;;;;;;;;;
float lane_width <- 0.7 ;;;;;;;0;1;;;;
list<intersection> non_deadend_nodes ;;;;;;;0;1;;;;
list<restaurant> restDisponibles ;;;;;;;0;1;;;;
float step <- 5.0 ;;;;;;;0;1;;;;
list<intersection> dst_nodes ;;;;;;;0;1;;;;
float vehicle_speed_limit ;;;;;;;0;1;;;;
string map_name <- 'Centro' ;;;;;;;0;1;;;;
file<unknown, string> shp_roads <- file<unknown, string>(('../includes/' + map_name) + '/roads.shp') ;;;;;;;2;1;;;;
file<unknown, string>(('../includes/' + map_name) + '/roads.shp');;;;;;;2;1;;;;
('../includes/' + map_name) + '/roads.shp';;;;;;;0;1;;;;
'../includes/' + map_name;;;;;;;0;1;;;;
file<unknown, string> shp_nodes <- file<unknown, string>(('../includes/' + map_name) + '/nodes.shp') ;;;;;;;2;1;;;;
file<unknown, string>(('../includes/' + map_name) + '/nodes.shp');;;;;;;2;1;;;;
('../includes/' + map_name) + '/nodes.shp';;;;;;;0;1;;;;
'../includes/' + map_name;;;;;;;0;1;;;;
file<point, unknown> restaurants_csv <- csv_file(('../includes/' + map_name) + '/restaurants.csv',true) ;;;;;;;2;1;;;;
csv_file(('../includes/' + map_name) + '/restaurants.csv',true);;;;;;;2;1;;;;
('../includes/' + map_name) + '/restaurants.csv';;;;;;;0;1;;;;
'../includes/' + map_name;;;;;;;0;1;;;;
file<point, unknown> pedidos_csv <- csv_file(('../includes/' + map_name) + '/pedidos.csv',true) ;;;;;;;1;1;;;;
csv_file(('../includes/' + map_name) + '/pedidos.csv',true);;;;;;;1;1;;;;
('../includes/' + map_name) + '/pedidos.csv';;;;;;;0;1;;;;
'../includes/' + map_name;;;;;;;0;1;;;;
geometry shape <- envelope(shp_roads) + float(50) ;;;;;;;8;1;;;;
envelope(shp_roads) + float(50);;;;;;;8;1;;;;
envelope(shp_roads);;;;;;;7;1;;;;
float(50);;;;;;;0;1;;;;
graph road_network ;;;;;;;0;1;;;;
list<point> restaurantes ;;;;;;;0;1;;;;
list<point> pedidos ;;;;;;;0;1;;;;
bool rain ;;;;;;;0;1;;;;
int pedidosEntregados <- 0 ;;;;;;;0;1;;;;
int pedidosNoEntregados <- 0 ;;;;;;;0;1;;;;
int vehiculos <- 20 ;;;;;;;0;1;;;;
list<restaurant> restaurant ;;;;;;;1;1;;;;
list<pedido> pedido ;;;;;;;0;1;;;;
list<road> road ;;;;;;;0;1;;;;
list<intersection> intersection ;;;;;;;0;1;;;;
list<base_vehicle> base_vehicle ;;;;;;;0;1;;;;
list<vehicle_following_path> vehicle_following_path ;;;;;;;1;1;;;;
species restaurant ;;;;;;;8;675;;;;
list<restaurant> peers ;;;;;;;0;9;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;0;9;;;;
-29;;;;;;;;;;;;
rgb color <- #red ;;;;;;;0;9;;;;
float lat ;;;;;;;0;9;;;;
float lon ;;;;;;;0;9;;;;
point rest ;;;;;;;0;9;;;;
string nombre ;;;;;;;0;9;;;;
aspect base ;;;;;;;;;171;6138;;
draw triangle(float(50)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;;;;;;;;71;6138;;
triangle(float(50));;;;;;;;;7;6138;;
float(50);;;;;;;;;5;6138;;
draw string(nombre) delegate: msi.gaml.statements.draw.TextDrawer@5af9fa5f color: #black font: font('SansSerif',10,#bold) ;;;;;;;;;91;6138;;
string(nombre);;;;;;;;;6;6138;;
font('SansSerif',10,#bold);;;;;;;;;;;;
species pedido ;;;;;;;9;675;;;;
list<pedido> peers ;;;;;;;0;33;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;0;33;;;;
-29;;;;;;;;;;;;
float lat ;;;;;;;0;33;;;;
float lon ;;;;;;;0;33;;;;
point rest ;;;;;;;0;33;;;;
aspect base ;;;;;;;;;916;22506;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #blue ;;;;;;;;;897;22506;;
circle(float(30));;;;;;;;;573;22506;;
float(30);;;;;;;;;13;22506;;
aspect entregado ;;;;;;;;;;;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #green ;;;;;;;;;;;;
circle(float(30));;;;;;;;;;;;
float(30);;;;;;;;;;;;
aspect cancelado ;;;;;;;;;;;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #red ;;;;;;;;;;;;
circle(float(30));;;;;;;;;;;;
float(30);;;;;;;;;;;;
species road skills: [road_skill] ;;;;;;;1376;675;;;;
[road_skill];;;;;;;;;;;;
list<road> peers ;;;;;;;21;6932;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;3;6932;;;;
-29;;;;;;;;;;;;
list<agent> all_agents ;;;;;;;7;6932;;;;
list segment_lengths ;;;;;;;9;6932;;;;
agent source_node ;;;;;;;4;6932;;;;
float maxspeed <- (50 * #km) / #h ;;;;;;;26;6932;;;;
(50 * #km) / #h;;;;;;;7;3466;;;;
50 * #km;;;;;;;6;3466;;;;
agent target_node ;;;;;;;3;6932;;;;
list vehicle_ordering ;;;;;;;6;6932;;;;
int num_segments ;;;;;;;5;6932;;;;
list<list> agents_on ;;;;;;;4;6932;;;;
int num_lanes <- 2 ;;;;;;;7;6932;;;;
road linked_road ;;;;;;;5;6932;;;;
-199;;;;;;;;;;;;
rgb color <- #white ;;;;;;;15;6932;;;;
string oneway ;;;;;;;6;6932;;;;
bool register (11 agent, 1 lane);;;;;;;;;;;;
bool unregister (11 agent);;;;;;;;;;;;
aspect base ;;;;;;;;;50070;4727624;;
draw shape delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color end_arrow: 1 ;;;;;;;;;48251;4727624;;
species intersection skills: [intersection_skill] ;;;;;;;1756;675;;;;
[intersection_skill];;;;;;;;;;;;
list<intersection> peers ;;;;;;;2;3018;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;1;3018;;;;
-29;;;;;;;;;;;;
list<agent> roads_in ;;;;;;;1;3018;;;;
map block ;;;;;;;3;3018;;;;
list<list> stop ;;;;;;;2;3018;;;;
list<agent> roads_out ;;;;;;;1;3018;;;;
list<agent> priority_roads ;;;;;;;1;3018;;;;
rgb color ;;;;;;;1;3018;;;;
bool is_traffic_signal ;;;;;;;1;3018;;;;
float time_to_change <- 30 * #sec ;;;;;;;10;3018;;;;
30 * #sec;;;;;;;2;3018;;;;
float counter <- rnd(time_to_change) ;;;;;;;11;3018;;;;
rnd(time_to_change);;;;;;;6;3018;;;;
list<road> ways1 ;;;;;;;4;3018;;;;
list<road> ways2 ;;;;;;;2;3018;;;;
bool is_green ;;;;;;;1;3018;;;;
rgb color_fire ;;;;;;;0;3018;;;;
action initialize ;;;;;;;23;3018;;;;
if is_traffic_signal ;;;;;;;18;3018;;;;
do compute_crossing ;;;;;;;13;98;;;;
add [] to: stop ;;;;;;;0;98;;;;
[];;;;;;;0;98;;;;
if flip(0.5) ;;;;;;;1;98;;;;
flip(0.5);;;;;;;0;98;;;;
else ;;;;;;;0;48;;;;
do to_red ;;;;;;;0;48;;;;
do to_green ;;;;;;;0;50;;;;
action compute_crossing ;;;;;;;13;98;;;;
if length(roads_in) >= 2 ;;;;;;;11;98;;;;
length(roads_in) >= 2;;;;;;;0;98;;;;
length(roads_in);;;;;;;0;98;;;;
let rd0 type: road value: road(roads_in[0]) ;;;;;;;0;95;;;;
road(roads_in[0]);;;;;;;0;95;;;;
roads_in[0];;;;;;;0;95;;;;
[0];;;;;;;0;95;;;;
let pts type: list<point> value: rd0.shape.points ;;;;;;;0;95;;;;
rd0.shape.points;;;;;;;0;95;;;;
rd0.shape;;;;;;;0;95;;;;
let ref_angle type: float value: direction_to(last(pts),rd0.location) ;;;;;;;0;95;;;;
direction_to(last(pts),rd0.location);;;;;;;0;95;;;;
last(pts);;;;;;;0;95;;;;
rd0.location;;;;;;;0;95;;;;
loop rd over: roads_in ;;;;;;;10;95;;;;
let pts2 type: list<point> value: road(rd).shape.points ;;;;;;;4;277;;;;
road(rd).shape.points;;;;;;;3;277;;;;
road(rd).shape;;;;;;;3;277;;;;
road(rd);;;;;;;0;277;;;;
let angle_dest type: float value: direction_to(last(pts2),rd.location) ;;;;;;;2;277;;;;
direction_to(last(pts2),rd.location);;;;;;;2;277;;;;
last(pts2);;;;;;;0;277;;;;
rd.location;;;;;;;1;277;;;;
let ang type: float value: abs(angle_dest - ref_angle) ;;;;;;;2;277;;;;
abs(angle_dest - ref_angle);;;;;;;2;277;;;;
angle_dest - ref_angle;;;;;;;1;277;;;;
if ((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315)) ;;;;;;;1;277;;;;
((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315));;;;;;;1;277;;;;
(ang > 45) and (ang < 135);;;;;;;1;277;;;;
ang > 45;;;;;;;0;277;;;;
ang < 135;;;;;;;1;178;;;;
(ang > 225) and (ang < 315);;;;;;;0;210;;;;
ang > 225;;;;;;;0;210;;;;
ang < 315;;;;;;;0;17;;;;
add road(rd) to: ways2 ;;;;;;;0;84;;;;
road(rd);;;;;;;0;84;;;;
loop rd over: roads_in ;;;;;;;2;98;;;;
if not(rd in ways2) ;;;;;;;2;280;;;;
not(rd in ways2);;;;;;;0;280;;;;
rd in ways2;;;;;;;0;280;;;;
add road(rd) to: ways1 ;;;;;;;1;196;;;;
road(rd);;;;;;;0;196;;;;
action to_green ;;;;;;;6;679;;;;
put ways2 at: 0 to: stop ;;;;;;;3;679;;;;
set color_fire value: #green ;;;;;;;2;679;;;;
set is_green value: true ;;;;;;;0;679;;;;
action to_red ;;;;;;;4;678;;;;
put ways1 at: 0 to: stop ;;;;;;;1;678;;;;
set color_fire value: #red ;;;;;;;0;678;;;;
set is_green value: false ;;;;;;;1;678;;;;
reflex dynamic_node when: is_traffic_signal ;;;;;;;986;2037150;;;;
set counter value: counter + step ;;;;;;;97;66150;;;;
counter + step;;;;;;;52;66150;;;;
if counter >= time_to_change ;;;;;;;62;66150;;;;
counter >= time_to_change;;;;;;;23;66150;;;;
set counter value: 0.0 ;;;;;;;0;1259;;;;
if is_green ;;;;;;;13;1259;;;;
else ;;;;;;;7;629;;;;
do to_green ;;;;;;;7;629;;;;
do to_red ;;;;;;;5;630;;;;
aspect base ;;;;;;;;;77146;2058276;;
if is_traffic_signal ;;;;;;;;;75635;2058276;;
else ;;;;;;;;;71986;1991440;;
draw circle(float(1)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;;;;;;;;71186;1991440;;
circle(float(1));;;;;;;;;49322;1991440;;
float(1);;;;;;;;;1312;1991440;;
draw triangle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color_fire ;;;;;;;;;579;66836;;
triangle(float(30));;;;;;;;;101;66836;;
float(30);;;;;;;;;43;66836;;
species base_vehicle skills: [driving] ;;;;;;;0;675;;;;
[driving];;;;;;;;;;;;
list<base_vehicle> peers ;;;;;;;;;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;;
-29;;;;;;;;;;;;
float real_speed <- 0.0 ;;;;;;;0;20;;;;
float heading <- rnd(360.0) ;;;;;;;0;20;;;;
rnd(360.0);;;;;;;0;20;;;;
point destination ;;;;;;;0;20;;;;
point location ;;;;;;;;;;;;
path current_path <- nil ;;;;;;;0;20;;;;
geometry current_edge <- nil ;;;;;;;0;20;;;;
float speed <- 0.0 ;;;;;;;0;20;;;;
float proba_use_linked_road <- 0.0 ;;;;;;;0;20;;;;
list<point> targets <- [] ;;;;;;;0;20;;;;
[];;;;;;;0;60;;;;
float security_distance_coeff <- 1.0 ;;;;;;;0;20;;;;
float proba_lane_change_up <- 1.0 ;;;;;;;0;20;;;;
float leading_speed <- nil ;;;;;;;0;20;;;;
float min_security_distance <- 0.5 ;;;;;;;0;20;;;;
float leading_distance <- nil ;;;;;;;0;20;;;;
float proba_lane_change_down <- 1.0 ;;;;;;;0;20;;;;
float proba_respect_priorities <- 1.0 ;;;;;;;0;20;;;;
list<float> proba_respect_stops <- [] ;;;;;;;0;20;;;;
[];;;;;;;0;60;;;;
float min_safety_distance <- 0.5 ;;;;;;;0;20;;;;
agent follower <- nil ;;;;;;;0;20;;;;
agent leading_vehicle <- nil ;;;;;;;0;20;;;;
int current_lane <- 0 ;;;;;;;0;20;;;;
float speed_coeff <- 1.0 ;;;;;;;0;20;;;;
float time_since_lane_change <- 0.0 ;;;;;;;0;20;;;;
bool violating_oneway <- false ;;;;;;;0;20;;;;
int segment_index_on_road <- -1 ;;;;;;;0;20;;;;
-1;;;;;;;0;40;;;;
int lowest_lane <- 0 ;;;;;;;0;20;;;;
int lane_change_limit <- 1 ;;;;;;;0;20;;;;
float acc_gain_threshold <- 0.2 ;;;;;;;0;20;;;;
float acc_bias <- 0.25 ;;;;;;;0;20;;;;
float safety_distance_coeff <- 1.0 ;;;;;;;0;20;;;;
int linked_lane_limit <- -1 ;;;;;;;0;20;;;;
-1;;;;;;;0;40;;;;
float time_headway <- 1.5 ;;;;;;;0;20;;;;
float politeness_factor <- 0.5 ;;;;;;;0;20;;;;
float distance_to_goal <- 0.0 ;;;;;;;0;20;;;;
float max_speed <- 50.0 ;;;;;;;0;20;;;;
int num_lanes_occupied <- 1 ;;;;;;;0;20;;;;
int current_index <- 0 ;;;;;;;0;20;;;;
float delta_idm <- 4.0 ;;;;;;;0;20;;;;
agent next_road <- nil ;;;;;;;0;20;;;;
agent current_road <- nil ;;;;;;;0;20;;;;
bool using_linked_road <- false ;;;;;;;0;20;;;;
agent current_target <- nil ;;;;;;;0;20;;;;
float distance_to_current_target <- 0.0 ;;;;;;;0;20;;;;
float max_deceleration <- 3.0 ;;;;;;;0;20;;;;
float max_safe_deceleration <- 4 ;;;;;;;0;20;;;;
float max_acceleration <- 0.3 ;;;;;;;0;20;;;;
list<unknown> allowed_lanes <- [] ;;;;;;;0;20;;;;
[];;;;;;;0;60;;;;
float lane_change_cooldown <- 4 ;;;;;;;0;20;;;;
float acceleration <- 0.0 ;;;;;;;0;20;;;;
bool ignore_oneway <- false ;;;;;;;0;20;;;;
bool on_linked_road <- false ;;;;;;;0;20;;;;
float vehicle_length <- 0.0 ;;;;;;;0;20;;;;
bool right_side_driving <- true ;;;;;;;0;20;;;;
agent final_target <- nil ;;;;;;;0;20;;;;
float proba_block_node <- 0.0 ;;;;;;;0;20;;;;
rgb color ;;;;;;;0;20;;;;
graph road_graph ;;;;;;;0;20;;;;
point pos ;;;;;;;0;20;;;;
bool entregado <- false ;;;;;;;0;20;;;;
string operador ;;;;;;;0;20;;;;
int num <- rnd(50) ;;;;;;;1;20;;;;
rnd(50);;;;;;;1;20;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);;;;;;;;;;;;
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;;;
bool wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;;;
bool test_next_road (11 new_road);;;;;;;;;;;;
float speed_choice (11 new_road);;;;;;;;;;;;
float external_factor_impact (11 new_road, 2 remaining_time);;;;;;;;;;;;
bool drive_random (15 graph, 10 proba_roads);;;;;;;;;;;;
path path_from_nodes (15 graph, 5 nodes);;;;;;;;;;;;
int lane_choice (11 new_road);;;;;;;;;;;;
int choose_lane (11 new_road);;;;;;;;;;;;
path compute_path (15 graph, 11 target, 11 source, 5 nodes);;;;;;;35;20;;;;
bool drive ;;;;;;;323;6142;;;;
bool unregister ;;;;;;;;;;;;
float advanced_follow_driving (17 path, 7 target, 2 speed, 2 time);;;;;;;;;;;;
action on_entering_new_road ;;;;;;;;;;;;
float force_move (1 lane, 2 acceleration, 2 time);;;;;;;;;;;;
path goto_drive (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 17 following);;;;;;;;;;;;
bool ready_to_cross (11 node, 11 new_road);;;;;;;;;;;;
point compute_position ;;;;;;;;;231;6122;;
if current_road != nil ;;;;;;;;;216;6122;;
current_road != nil;;;;;;;;;1;6122;;
else ;;;;;;;;;;;;
return point(0,0) ;;;;;;;;;;;;
point(0,0);;;;;;;;;;;;
let dist type: float value: (((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width ;;;;;;;;;138;6122;;
(((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width;;;;;;;;;127;6122;;
((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5;;;;;;;;;107;6122;;
(road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1));;;;;;;;;103;6122;;
road(current_road).num_lanes - current_lane;;;;;;;;;39;6122;;
road(current_road).num_lanes;;;;;;;;;29;6122;;
road(current_road);;;;;;;;;15;6122;;
mean(range(num_lanes_occupied - 1));;;;;;;;;60;6122;;
range(num_lanes_occupied - 1);;;;;;;;;11;6122;;
num_lanes_occupied - 1;;;;;;;;;2;6122;;
if violating_oneway ;;;;;;;;;11;6122;;
set dist value: -dist ;;;;;;;;;;;;
-dist;;;;;;;;;;;;
let shift_pt type: point value: point(cos(heading + 90) * dist,sin(heading + 90) * dist) ;;;;;;;;;39;6122;;
point(cos(heading + 90) * dist,sin(heading + 90) * dist);;;;;;;;;38;6122;;
cos(heading + 90) * dist;;;;;;;;;22;6122;;
cos(heading + 90);;;;;;;;;15;6122;;
heading + 90;;;;;;;;;7;6122;;
sin(heading + 90) * dist;;;;;;;;;8;6122;;
sin(heading + 90);;;;;;;;;7;6122;;
heading + 90;;;;;;;;;2;6122;;
return location + shift_pt ;;;;;;;;;16;6122;;
location + shift_pt;;;;;;;;;9;6122;;
aspect base ;;;;;;;;;633;6262;;
if current_road != nil ;;;;;;;;;630;6262;;
current_road != nil;;;;;;;;;14;6262;;
set pos value: self.compute_position() ;;;;;;;;;256;6122;;
self.compute_position();;;;;;;;;;;;
draw rectangle(float(20),float(40)) border: #black delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 rotate: heading + 90 color: #yellow ;;;;;;;;;356;6122;;
heading + 90;;;;;;;;;1;6122;;
rectangle(float(20),float(40));;;;;;;;;9;6122;;
float(20);;;;;;;;;0;6122;;
float(40);;;;;;;;;1;6122;;
species vehicle_following_path parent: base_vehicle ;;;;;;;424;675;;;;
list<vehicle_following_path> peers ;;;;;;;0;20;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;0;20;;;;
-29;;;;;;;;;;;;
point location ;;;;;;;0;20;;;;
float timer <- 0.0 * #minute ;;;;;;;0;20;;;;
0.0 * #minute;;;;;;;0;20;;;;
float vehicle_max_speed ;;;;;;;0;20;;;;
point destinoFinal <- pedidos[32] ;;;;;;;0;20;;;;
pedidos[32];;;;;;;0;20;;;;
[32];;;;;;;0;20;;;;
init ;;;;;;;0;20;;;;
set vehicle_length value: 1.9 * #m ;;;;;;;0;20;;;;
1.9 * #m;;;;;;;0;20;;;;
if rain ;;;;;;;0;20;;;;
else ;;;;;;;0;20;;;;
set max_speed value: 50 / 3600 ;;;;;;;0;20;;;;
50 / 3600;;;;;;;0;20;;;;
set max_speed value: 40 / 3600 ;;;;;;;;;;;;
40 / 3600;;;;;;;;;;;;
set max_acceleration value: 3.5 ;;;;;;;0;20;;;;
reflex select_next_path when: current_path = nil ;;;;;;;41;6142;;;;
current_path = nil;;;;;;;4;6142;;;;
set dst_nodes value: [intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)] ;;;;;;;0;20;;;;
[intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)];;;;;;;0;20;;;;
intersection[rnd(3017)];;;;;;;0;20;;;;
[rnd(3017)];;;;;;;0;20;;;;
rnd(3017);;;;;;;0;20;;;;
intersection(restaurantes[rnd(8)]);;;;;;;0;20;;;;
restaurantes[rnd(8)];;;;;;;0;20;;;;
[rnd(8)];;;;;;;0;20;;;;
rnd(8);;;;;;;0;20;;;;
intersection(destinoFinal);;;;;;;0;20;;;;
do compute_path (nodes:dst_nodes, graph:road_network);;;;;;;35;20;;;;
reflex commute when: current_path != nil ;;;;;;;364;6142;;;;
current_path != nil;;;;;;;4;6142;;;;
do drive ;;;;;;;330;6142;;;;
set timer value: timer + step ;;;;;;;24;6142;;;;
timer + step;;;;;;;14;6142;;;;
reflex stop when: current_path = nil ;;;;;;;10;6142;;;;
current_path = nil;;;;;;;4;6142;;;;
let t_final type: int value: int(timer / 60) ;;;;;;;0;20;;;;
int(timer / 60);;;;;;;0;20;;;;
timer / 60;;;;;;;0;20;;;;
if t_final > 30 ;;;;;;;5;20;;;;
t_final > 30;;;;;;;0;20;;;;
else ;;;;;;;4;16;;;;
set pedidosEntregados value: pedidosEntregados + 1 ;;;;;;;0;16;;;;
pedidosEntregados + 1;;;;;;;0;16;;;;
write ('Tiempo: ' + t_final) + ' minutos' ;;;;;;;4;16;;;;
('Tiempo: ' + t_final) + ' minutos';;;;;;;1;16;;;;
'Tiempo: ' + t_final;;;;;;;1;16;;;;
set pedidosNoEntregados value: pedidosNoEntregados + 1 ;;;;;;;0;4;;;;
pedidosNoEntregados + 1;;;;;;;0;4;;;;
write 'Pedido no entregado' ;;;;;;;1;4;;;;
set vehiculos value: vehiculos - 1 ;;;;;;;0;20;;;;
vehiculos - 1;;;;;;;0;20;;;;
do die ;;;;;;;0;20;;;;
init ;;;;;;;737;1;;;;
create road from: shp_roads with: [num_lanes::int(read('lanes'))];;;;;;;899;3467;;;;
create road ;;;;;;;510;6932;;;;
set num_lanes value: myself.num_lanes ;;;;;;;16;3466;;;;
myself.num_lanes;;;;;;;14;3466;;;;
set shape value: polyline(reverse(myself.shape.points)) ;;;;;;;52;3466;;;;
polyline(reverse(myself.shape.points));;;;;;;22;3466;;;;
reverse(myself.shape.points);;;;;;;18;3466;;;;
myself.shape.points;;;;;;;9;3466;;;;
myself.shape;;;;;;;7;3466;;;;
set maxspeed value: myself.maxspeed ;;;;;;;23;3466;;;;
myself.maxspeed;;;;;;;13;3466;;;;
set linked_road value: myself ;;;;;;;9;3466;;;;
set myself.linked_road value: self ;;;;;;;10;3466;;;;
myself.linked_road;;;;;;;;;;;;
create intersection from: shp_nodes with: [is_traffic_signal::read('type') = 'traffic_signals'];;;;;;;135;3019;;;;
set time_to_change value: 260 * #sec ;;;;;;;3;3018;;;;
260 * #sec;;;;;;;1;3018;;;;
create restaurant from: restaurants_csv with: [lon::float(get('longitude')), nombre::string(get('location_name')), lat::float(get('latitude'))];;;;;;;3;10;;;;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;;;;;;1;9;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;;;;;;1;9;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;;;;;;1;9;;;;
point(lon,lat);;;;;;;1;9;;;;
add location to: restaurantes ;;;;;;;0;9;;;;
create pedido from: pedidos_csv with: [lon::float(get('lon')), lat::float(get('lat'))];;;;;;;3;34;;;;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;;;;;;0;33;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;;;;;;0;33;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;;;;;;0;33;;;;
point(lon,lat);;;;;;;0;33;;;;
add location to: pedidos ;;;;;;;1;33;;;;
let edge_weights type: map value: road as_map (each :: each.shape.perimeter) ;;;;;;;24;1;;;;
road as_map (each :: each.shape.perimeter);;;;;;;24;1;;;;
each :: each.shape.perimeter;;;;;;;;;;;;
each.shape.perimeter;;;;;;;18;6932;;;;
each.shape;;;;;;;11;6932;;;;
set road_network value: with_weights(as_driving_graph(road,intersection),edge_weights) ;;;;;;;22;1;;;;
with_weights(as_driving_graph(road,intersection),edge_weights);;;;;;;22;1;;;;
as_driving_graph(road,intersection);;;;;;;18;1;;;;
ask intersection ;;;;;;;58;3019;;;;
do initialize ;;;;;;;25;3018;;;;
create vehicle_following_path number: vehiculos with: [vehicle_max_speed::vehicle_speed_limit];;;;;;;3;1;;;;
experiment 'city_rain' type: 'gui' title: 'Experiment city_rain' benchmark: true ;;;;;;;;;;;;
list<city_rain> peers ;;;;;0;1;;;;;;
-199;;;;;;;;;;;;
FollowingPaths_model host ;;;;;0;1;;;;;;
-29;;;;;;;;;;;;
list<FollowingPaths_model> simulations ;;;;;0;1;;;;;;
-27;;;;;;;;;;;;
FollowingPaths_model simulation ;;;;;0;1;;;;;;
-27;;;;;;;;;;;;
reflex end_of_runs ;;;;;;;;;;;1682;675
let cpt type: int value: 0 ;;;;;;;;;;;0;675
let cpt_n type: int value: 0 ;;;;;;;;;;;0;675
ask simulations ;;;;;;;;;;;3362;1350
save [pedidosNoEntregados,pedidosEntregados] format: 'csv' to: 'save_data.csv' ;;;;;;;;;;;1678;675
[pedidosNoEntregados,pedidosEntregados];;;;;;;;;;;12;675
parameter 'rain' <- false var: rain ;;;;;;;;;;;;
output synchronized: true ;;;;;;;;;;;;
display 'map' type: '2d' background: rain ? #green : #grey ;6;675;;;;;1;2;;;;
rain ? #green : #grey;2;678;;;;;;;;;;
#green : #grey;;;;;;;;;;;;
species road aspect: base ;0;677;;;;;;;;;;
species vehicle_following_path aspect: base ;0;677;;;;;;;;;;
species intersection aspect: base ;0;677;;;;;;;;;;
species restaurant aspect: base ;0;677;;;;;;;;;;
species pedido aspect: base ;1;677;;;;;;;;;;
permanent ;;;;;;;;;;;;
display 'chart_display' refresh: every(10 * #cycle) type: '2d' ;;;1;68;;;;;;;4;2
every(10 * #cycle);;;0;1418;;;;;;;;
10 * #cycle;;;0;1418;;;;;;;;
chart 'Entrega de Pedidos' position: point(0,0) type: series size: point(1,0.5) ;;;5;70;;;;;;;;
point(0,0);;;;;;;;;;;;
point(1,0.5);;;;;;;;;;;;
data 'Pedidos' style: line color: #green value: pedidosEntregados ;;;0;1;;;;;;;;
data 'Pedidos No entregados' style: line color: #red value: pedidosNoEntregados ;;;0;1;;;;;;;;
