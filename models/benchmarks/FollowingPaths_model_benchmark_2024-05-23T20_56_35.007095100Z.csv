Execution;Time in ms in Scope #693 (in ExperimentPlan);Invocations in Scope #693 (in ExperimentPlan)
model FollowingPaths

global ;;
list<FollowingPaths_model> peers ;;
-199;;
experiment host ;;
-29;;
experiment experiment ;;
-31;;
FollowingPaths_model world ;;
-27;;
float lane_width <- 0.7 ;;
list<intersection> non_deadend_nodes ;;
list<restaurant> restDisponibles ;;
float step <- 5.0 ;;
list<intersection> dst_nodes ;;
float vehicle_speed_limit ;;
string map_name <- 'Centro' ;;
file<unknown, string> shp_roads <- file<unknown, string>(('../includes/' + map_name) + '/roads.shp') ;;
file<unknown, string>(('../includes/' + map_name) + '/roads.shp');;
('../includes/' + map_name) + '/roads.shp';;
'../includes/' + map_name;;
file<unknown, string> shp_nodes <- file<unknown, string>(('../includes/' + map_name) + '/nodes.shp') ;;
file<unknown, string>(('../includes/' + map_name) + '/nodes.shp');;
('../includes/' + map_name) + '/nodes.shp';;
'../includes/' + map_name;;
file<point, unknown> restaurants_csv <- csv_file(('../includes/' + map_name) + '/restaurants.csv',true) ;;
csv_file(('../includes/' + map_name) + '/restaurants.csv',true);;
('../includes/' + map_name) + '/restaurants.csv';;
'../includes/' + map_name;;
file<point, unknown> pedidos_csv <- csv_file(('../includes/' + map_name) + '/pedidos.csv',true) ;;
csv_file(('../includes/' + map_name) + '/pedidos.csv',true);;
('../includes/' + map_name) + '/pedidos.csv';;
'../includes/' + map_name;;
geometry shape <- envelope(shp_roads) + float(50) ;;
envelope(shp_roads) + float(50);;
envelope(shp_roads);;
float(50);;
graph road_network ;;
list<point> restaurantes ;;
list<point> pedidos ;;
bool rain ;;
int pedidosEntregados <- 0 ;;
int pedidosNoEntregados <- 0 ;;
int vehiculos <- 20 ;;
list<restaurant> restaurant ;;
list<pedido> pedido ;;
list<road> road ;;
list<intersection> intersection ;;
list<base_vehicle> base_vehicle ;;
list<vehicle_following_path> vehicle_following_path ;;
species restaurant ;;
list<restaurant> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
rgb color <- #red ;;
float lat ;;
float lon ;;
point rest ;;
string nombre ;;
aspect base ;;
draw triangle(float(50)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;
triangle(float(50));;
float(50);;
draw string(nombre) delegate: msi.gaml.statements.draw.TextDrawer@5af9fa5f color: #black font: font('SansSerif',10,#bold) ;;
string(nombre);;
font('SansSerif',10,#bold);;
species pedido ;;
list<pedido> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
float lat ;;
float lon ;;
point rest ;;
aspect base ;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #blue ;;
circle(float(30));;
float(30);;
aspect entregado ;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #green ;;
circle(float(30));;
float(30);;
aspect cancelado ;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #red ;;
circle(float(30));;
float(30);;
species road skills: [road_skill] ;;
[road_skill];;
list<road> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
list<agent> all_agents ;;
list segment_lengths ;;
agent source_node ;;
float maxspeed <- (50 * #km) / #h ;;
(50 * #km) / #h;;
50 * #km;;
agent target_node ;;
list vehicle_ordering ;;
int num_segments ;;
list<list> agents_on ;;
int num_lanes <- 2 ;;
road linked_road ;;
-199;;
rgb color <- #white ;;
string oneway ;;
bool register (11 agent, 1 lane);;
bool unregister (11 agent);;
aspect base ;;
draw shape delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color end_arrow: 1 ;;
species intersection skills: [intersection_skill] ;;
[intersection_skill];;
list<intersection> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
list<agent> roads_in ;;
map block ;;
list<list> stop ;;
list<agent> roads_out ;;
list<agent> priority_roads ;;
rgb color ;;
bool is_traffic_signal ;;
float time_to_change <- 30 * #sec ;;
30 * #sec;;
float counter <- rnd(time_to_change) ;;
rnd(time_to_change);;
list<road> ways1 ;;
list<road> ways2 ;;
bool is_green ;;
rgb color_fire ;;
action initialize ;;
if is_traffic_signal ;;
do compute_crossing ;;
add [] to: stop ;;
[];;
if flip(0.5) ;;
flip(0.5);;
else ;;
do to_red ;;
do to_green ;;
action compute_crossing ;;
if length(roads_in) >= 2 ;;
length(roads_in) >= 2;;
length(roads_in);;
let rd0 type: road value: road(roads_in[0]) ;;
road(roads_in[0]);;
roads_in[0];;
[0];;
let pts type: list<point> value: rd0.shape.points ;;
rd0.shape.points;;
rd0.shape;;
let ref_angle type: float value: direction_to(last(pts),rd0.location) ;;
direction_to(last(pts),rd0.location);;
last(pts);;
rd0.location;;
loop rd over: roads_in ;;
let pts2 type: list<point> value: road(rd).shape.points ;;
road(rd).shape.points;;
road(rd).shape;;
road(rd);;
let angle_dest type: float value: direction_to(last(pts2),rd.location) ;;
direction_to(last(pts2),rd.location);;
last(pts2);;
rd.location;;
let ang type: float value: abs(angle_dest - ref_angle) ;;
abs(angle_dest - ref_angle);;
angle_dest - ref_angle;;
if ((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315)) ;;
((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315));;
(ang > 45) and (ang < 135);;
ang > 45;;
ang < 135;;
(ang > 225) and (ang < 315);;
ang > 225;;
ang < 315;;
add road(rd) to: ways2 ;;
road(rd);;
loop rd over: roads_in ;;
if not(rd in ways2) ;;
not(rd in ways2);;
rd in ways2;;
add road(rd) to: ways1 ;;
road(rd);;
action to_green ;;
put ways2 at: 0 to: stop ;;
set color_fire value: #green ;;
set is_green value: true ;;
action to_red ;;
put ways1 at: 0 to: stop ;;
set color_fire value: #red ;;
set is_green value: false ;;
reflex dynamic_node when: is_traffic_signal ;;
set counter value: counter + step ;;
counter + step;;
if counter >= time_to_change ;;
counter >= time_to_change;;
set counter value: 0.0 ;;
if is_green ;;
else ;;
do to_green ;;
do to_red ;;
aspect base ;;
if is_traffic_signal ;;
else ;;
draw circle(float(1)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;
circle(float(1));;
float(1);;
draw triangle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color_fire ;;
triangle(float(30));;
float(30);;
species base_vehicle skills: [driving] ;;
[driving];;
list<base_vehicle> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
float real_speed <- 0.0 ;;
float heading <- rnd(360.0) ;;
rnd(360.0);;
point destination ;;
point location ;;
path current_path <- nil ;;
geometry current_edge <- nil ;;
float speed <- 0.0 ;;
float proba_use_linked_road <- 0.0 ;;
list<point> targets <- [] ;;
[];;
float security_distance_coeff <- 1.0 ;;
float proba_lane_change_up <- 1.0 ;;
float leading_speed <- nil ;;
float min_security_distance <- 0.5 ;;
float leading_distance <- nil ;;
float proba_lane_change_down <- 1.0 ;;
float proba_respect_priorities <- 1.0 ;;
list<float> proba_respect_stops <- [] ;;
[];;
float min_safety_distance <- 0.5 ;;
agent follower <- nil ;;
agent leading_vehicle <- nil ;;
int current_lane <- 0 ;;
float speed_coeff <- 1.0 ;;
float time_since_lane_change <- 0.0 ;;
bool violating_oneway <- false ;;
int segment_index_on_road <- -1 ;;
-1;;
int lowest_lane <- 0 ;;
int lane_change_limit <- 1 ;;
float acc_gain_threshold <- 0.2 ;;
float acc_bias <- 0.25 ;;
float safety_distance_coeff <- 1.0 ;;
int linked_lane_limit <- -1 ;;
-1;;
float time_headway <- 1.5 ;;
float politeness_factor <- 0.5 ;;
float distance_to_goal <- 0.0 ;;
float max_speed <- 50.0 ;;
int num_lanes_occupied <- 1 ;;
int current_index <- 0 ;;
float delta_idm <- 4.0 ;;
agent next_road <- nil ;;
agent current_road <- nil ;;
bool using_linked_road <- false ;;
agent current_target <- nil ;;
float distance_to_current_target <- 0.0 ;;
float max_deceleration <- 3.0 ;;
float max_safe_deceleration <- 4 ;;
float max_acceleration <- 0.3 ;;
list<unknown> allowed_lanes <- [] ;;
[];;
float lane_change_cooldown <- 4 ;;
float acceleration <- 0.0 ;;
bool ignore_oneway <- false ;;
bool on_linked_road <- false ;;
float vehicle_length <- 0.0 ;;
bool right_side_driving <- true ;;
agent final_target <- nil ;;
float proba_block_node <- 0.0 ;;
rgb color ;;
graph road_graph ;;
point pos ;;
bool entregado <- false ;;
string operador ;;
int num <- rnd(50) ;;
rnd(50);;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);;
path move (2 speed, 2 heading, 13 bounds);;
bool wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;
bool test_next_road (11 new_road);;
float speed_choice (11 new_road);;
float external_factor_impact (11 new_road, 2 remaining_time);;
bool drive_random (15 graph, 10 proba_roads);;
path path_from_nodes (15 graph, 5 nodes);;
int lane_choice (11 new_road);;
int choose_lane (11 new_road);;
path compute_path (15 graph, 11 target, 11 source, 5 nodes);;
bool drive ;;
bool unregister ;;
float advanced_follow_driving (17 path, 7 target, 2 speed, 2 time);;
action on_entering_new_road ;;
float force_move (1 lane, 2 acceleration, 2 time);;
path goto_drive (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 17 following);;
bool ready_to_cross (11 node, 11 new_road);;
point compute_position ;;
if current_road != nil ;;
current_road != nil;;
else ;;
return point(0,0) ;;
point(0,0);;
let dist type: float value: (((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width ;;
(((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width;;
((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5;;
(road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1));;
road(current_road).num_lanes - current_lane;;
road(current_road).num_lanes;;
road(current_road);;
mean(range(num_lanes_occupied - 1));;
range(num_lanes_occupied - 1);;
num_lanes_occupied - 1;;
if violating_oneway ;;
set dist value: -dist ;;
-dist;;
let shift_pt type: point value: point(cos(heading + 90) * dist,sin(heading + 90) * dist) ;;
point(cos(heading + 90) * dist,sin(heading + 90) * dist);;
cos(heading + 90) * dist;;
cos(heading + 90);;
heading + 90;;
sin(heading + 90) * dist;;
sin(heading + 90);;
heading + 90;;
return location + shift_pt ;;
location + shift_pt;;
aspect base ;;
if current_road != nil ;;
current_road != nil;;
set pos value: self.compute_position() ;;
self.compute_position();;
draw rectangle(float(20),float(40)) border: #black delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 rotate: heading + 90 color: #yellow ;;
heading + 90;;
rectangle(float(20),float(40));;
float(20);;
float(40);;
species vehicle_following_path parent: base_vehicle ;;
list<vehicle_following_path> peers ;;
-199;;
FollowingPaths_model host ;;
-29;;
point location ;;
float timer <- 0.0 * #minute ;;
0.0 * #minute;;
float vehicle_max_speed ;;
point destinoFinal <- pedidos[32] ;;
pedidos[32];;
[32];;
init ;;
set vehicle_length value: 1.9 * #m ;;
1.9 * #m;;
if rain ;;
else ;;
set max_speed value: 50 / 3600 ;;
50 / 3600;;
set max_speed value: 30 / 3600 ;;
30 / 3600;;
set max_acceleration value: 3.5 ;;
reflex select_next_path when: current_path = nil ;;
current_path = nil;;
set dst_nodes value: [intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)] ;;
[intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)];;
intersection[rnd(3017)];;
[rnd(3017)];;
rnd(3017);;
intersection(restaurantes[rnd(8)]);;
restaurantes[rnd(8)];;
[rnd(8)];;
rnd(8);;
intersection(destinoFinal);;
do compute_path (nodes:dst_nodes, graph:road_network);;
reflex commute when: current_path != nil ;;
current_path != nil;;
do drive ;;
set timer value: timer + step ;;
timer + step;;
reflex stop when: current_path = nil ;;
current_path = nil;;
let t_final type: int value: int(timer / 60) ;;
int(timer / 60);;
timer / 60;;
if t_final > 30 ;;
t_final > 30;;
else ;;
set pedidosEntregados value: pedidosEntregados + 1 ;;
pedidosEntregados + 1;;
write ('Tiempo: ' + t_final) + ' minutos' ;;
('Tiempo: ' + t_final) + ' minutos';;
'Tiempo: ' + t_final;;
set pedidosNoEntregados value: pedidosNoEntregados + 1 ;;
pedidosNoEntregados + 1;;
write 'Pedido no entregado' ;;
set vehiculos value: vehiculos - 1 ;;
vehiculos - 1;;
do die ;;
init ;;
create road from: shp_roads with: [num_lanes::int(read('lanes'))];;
create road ;;
set num_lanes value: myself.num_lanes ;;
myself.num_lanes;;
set shape value: polyline(reverse(myself.shape.points)) ;;
polyline(reverse(myself.shape.points));;
reverse(myself.shape.points);;
myself.shape.points;;
myself.shape;;
set maxspeed value: myself.maxspeed ;;
myself.maxspeed;;
set linked_road value: myself ;;
set myself.linked_road value: self ;;
myself.linked_road;;
create intersection from: shp_nodes with: [is_traffic_signal::read('type') = 'traffic_signals'];;
set time_to_change value: 260 * #sec ;;
260 * #sec;;
create restaurant from: restaurants_csv with: [lon::float(get('longitude')), nombre::string(get('location_name')), lat::float(get('latitude'))];;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;
point(lon,lat);;
add location to: restaurantes ;;
create pedido from: pedidos_csv with: [lon::float(get('lon')), lat::float(get('lat'))];;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;
point(lon,lat);;
add location to: pedidos ;;
let edge_weights type: map value: road as_map (each :: each.shape.perimeter) ;;
road as_map (each :: each.shape.perimeter);;
each :: each.shape.perimeter;;
each.shape.perimeter;;
each.shape;;
set road_network value: with_weights(as_driving_graph(road,intersection),edge_weights) ;;
with_weights(as_driving_graph(road,intersection),edge_weights);;
as_driving_graph(road,intersection);;
ask intersection ;;
do initialize ;;
create vehicle_following_path number: vehiculos with: [vehicle_max_speed::vehicle_speed_limit];;
experiment 'city_rain' type: 'gui' title: 'Experiment city_rain' benchmark: true ;;
list<city_rain> peers ;0;1
-199;;
FollowingPaths_model host ;0;1
-29;;
list<FollowingPaths_model> simulations ;0;1
-27;;
FollowingPaths_model simulation ;0;1
-27;;
float seedValue <- 10.0 ;0;1
float seed <- seedValue ;0;1
init ;;
create simulation with: [rain::true, seed::seedValue];;
parameter 'rain' <- false var: rain ;;
output synchronized: true ;;
display 'map' type: '2d' background: rain ? #green : #grey ;;
rain ? #green : #grey;;
#green : #grey;;
species road aspect: base ;;
species vehicle_following_path aspect: base ;;
species intersection aspect: base ;;
species restaurant aspect: base ;;
species pedido aspect: base ;;
display 'chart_display' refresh: every(10 * #cycle) type: '2d' ;;
every(10 * #cycle);;
10 * #cycle;;
chart 'Entrega de Pedidos' position: point(0,0) type: series size: point(1,0.5) ;;
point(0,0);;
point(1,0.5);;
data 'Pedidos' style: line color: #green value: pedidosEntregados ;;
data 'Pedidos No entregados' style: line color: #red value: pedidosNoEntregados ;;
