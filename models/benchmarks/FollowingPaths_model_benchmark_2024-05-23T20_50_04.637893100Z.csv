Execution;Time in ms in Scope #621 of FollowingPaths_model(0) (of display map);Invocations in Scope #621 of FollowingPaths_model(0) (of display map);Time in ms in Scope #623 of FollowingPaths_model(0) (in java2D display );Invocations in Scope #623 of FollowingPaths_model(0) (in java2D display );Time in ms in Scope #627 of FollowingPaths_model(1) (of display map (S1));Invocations in Scope #627 of FollowingPaths_model(1) (of display map (S1));Time in ms in Scope #615 of city_rain(0);Invocations in Scope #615 of city_rain(0);Time in ms in Scope #629 of FollowingPaths_model(1) (in java2D display );Invocations in Scope #629 of FollowingPaths_model(1) (in java2D display );Time in ms in Scope #624 of FollowingPaths_model(1);Invocations in Scope #624 of FollowingPaths_model(1);Time in ms in Scope #618 of FollowingPaths_model(0);Invocations in Scope #618 of FollowingPaths_model(0);Time in ms in Scope #630 of city_rain(0) (of display chart_display);Invocations in Scope #630 of city_rain(0) (of display chart_display);Time in ms in Scope #614 (in ExperimentPlan);Invocations in Scope #614 (in ExperimentPlan)
model FollowingPaths

global ;;;;;;;;;;;;;;;;;;
list<FollowingPaths_model> peers ;;;;;;;;;;;0;1;1;1;;;;
-199;;;;;;;;;;;;;;;;;;
experiment host ;;;;;;;;;;;0;1;0;1;;;;
-29;;;;;;;;;;;;;;;;;;
experiment experiment ;;;;;;;;;;;0;1;0;1;;;;
-31;;;;;;;;;;;;;;;;;;
FollowingPaths_model world ;;;;;;;;;;;0;1;0;1;;;;
-27;;;;;;;;;;;;;;;;;;
float lane_width <- 0.7 ;;;;;;;;;;;0;1;0;1;;;;
list<intersection> non_deadend_nodes ;;;;;;;;;;;0;1;0;1;;;;
list<restaurant> restDisponibles ;;;;;;;;;;;0;1;0;1;;;;
float step <- 5.0 ;;;;;;;;;;;0;1;0;1;;;;
list<intersection> dst_nodes ;;;;;;;;;;;0;1;0;1;;;;
float vehicle_speed_limit ;;;;;;;;;;;0;1;0;1;;;;
string map_name <- 'Centro' ;;;;;;;;;;;0;1;0;1;;;;
file<unknown, string> shp_roads <- file<unknown, string>(('../includes/' + map_name) + '/roads.shp') ;;;;;;;;;;;2;1;1;1;;;;
file<unknown, string>(('../includes/' + map_name) + '/roads.shp');;;;;;;;;;;2;1;1;1;;;;
('../includes/' + map_name) + '/roads.shp';;;;;;;;;;;0;1;0;1;;;;
'../includes/' + map_name;;;;;;;;;;;0;1;0;1;;;;
file<unknown, string> shp_nodes <- file<unknown, string>(('../includes/' + map_name) + '/nodes.shp') ;;;;;;;;;;;1;1;1;1;;;;
file<unknown, string>(('../includes/' + map_name) + '/nodes.shp');;;;;;;;;;;1;1;1;1;;;;
('../includes/' + map_name) + '/nodes.shp';;;;;;;;;;;0;1;0;1;;;;
'../includes/' + map_name;;;;;;;;;;;0;1;0;1;;;;
file<point, unknown> restaurants_csv <- csv_file(('../includes/' + map_name) + '/restaurants.csv',true) ;;;;;;;;;;;1;1;2;1;;;;
csv_file(('../includes/' + map_name) + '/restaurants.csv',true);;;;;;;;;;;1;1;2;1;;;;
('../includes/' + map_name) + '/restaurants.csv';;;;;;;;;;;0;1;0;1;;;;
'../includes/' + map_name;;;;;;;;;;;0;1;0;1;;;;
file<point, unknown> pedidos_csv <- csv_file(('../includes/' + map_name) + '/pedidos.csv',true) ;;;;;;;;;;;2;1;1;1;;;;
csv_file(('../includes/' + map_name) + '/pedidos.csv',true);;;;;;;;;;;2;1;1;1;;;;
('../includes/' + map_name) + '/pedidos.csv';;;;;;;;;;;0;1;0;1;;;;
'../includes/' + map_name;;;;;;;;;;;0;1;0;1;;;;
geometry shape <- envelope(shp_roads) + float(50) ;;;;;;;;;;;6;1;6;1;;;;
envelope(shp_roads) + float(50);;;;;;;;;;;6;1;6;1;;;;
envelope(shp_roads);;;;;;;;;;;5;1;6;1;;;;
float(50);;;;;;;;;;;1;1;0;1;;;;
graph road_network ;;;;;;;;;;;0;1;0;1;;;;
list<point> restaurantes ;;;;;;;;;;;0;1;0;1;;;;
list<point> pedidos ;;;;;;;;;;;0;1;0;1;;;;
bool rain ;;;;;;;;;;;0;1;0;1;;;;
int pedidosEntregados <- 0 ;;;;;;;;;;;0;1;0;1;;;;
int pedidosNoEntregados <- 0 ;;;;;;;;;;;0;1;0;1;;;;
int vehiculos <- 20 ;;;;;;;;;;;0;1;0;1;;;;
list<restaurant> restaurant ;;;;;;;;;;;0;1;0;1;;;;
list<pedido> pedido ;;;;;;;;;;;0;1;0;1;;;;
list<road> road ;;;;;;;;;;;0;1;0;1;;;;
list<intersection> intersection ;;;;;;;;;;;0;1;1;1;;;;
list<base_vehicle> base_vehicle ;;;;;;;;;;;0;1;0;1;;;;
list<vehicle_following_path> vehicle_following_path ;;;;;;;;;;;0;1;0;1;;;;
species restaurant ;;;;;;;;;;;0;11;0;11;;;;
list<restaurant> peers ;;;;;;;;;;;0;9;0;9;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;0;9;0;9;;;;
-29;;;;;;;;;;;;;;;;;;
rgb color <- #red ;;;;;;;;;;;0;9;0;9;;;;
float lat ;;;;;;;;;;;0;9;0;9;;;;
float lon ;;;;;;;;;;;0;9;0;9;;;;
point rest ;;;;;;;;;;;0;9;0;9;;;;
string nombre ;;;;;;;;;;;0;9;0;9;;;;
aspect base ;;;2;153;;;;;4;153;;;;;;;;
draw triangle(float(50)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;;0;153;;;;;1;153;;;;;;;;
triangle(float(50));;;0;153;;;;;0;153;;;;;;;;
float(50);;;0;153;;;;;0;153;;;;;;;;
draw string(nombre) delegate: msi.gaml.statements.draw.TextDrawer@5af9fa5f color: #black font: font('SansSerif',10,#bold) ;;;2;153;;;;;3;153;;;;;;;;
string(nombre);;;0;153;;;;;0;153;;;;;;;;
font('SansSerif',10,#bold);;;;;;;;;;;;;;;;;;
species pedido ;;;;;;;;;;;0;11;0;11;;;;
list<pedido> peers ;;;;;;;;;;;0;33;0;33;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;0;33;0;33;;;;
-29;;;;;;;;;;;;;;;;;;
float lat ;;;;;;;;;;;0;33;0;33;;;;
float lon ;;;;;;;;;;;0;33;0;33;;;;
point rest ;;;;;;;;;;;0;33;0;33;;;;
aspect base ;;;20;561;;;;;18;561;;;;;;;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #blue ;;;20;561;;;;;18;561;;;;;;;;
circle(float(30));;;13;561;;;;;12;561;;;;;;;;
float(30);;;0;561;;;;;0;561;;;;;;;;
aspect entregado ;;;;;;;;;;;;;;;;;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #green ;;;;;;;;;;;;;;;;;;
circle(float(30));;;;;;;;;;;;;;;;;;
float(30);;;;;;;;;;;;;;;;;;
aspect cancelado ;;;;;;;;;;;;;;;;;;
draw circle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: #red ;;;;;;;;;;;;;;;;;;
circle(float(30));;;;;;;;;;;;;;;;;;
float(30);;;;;;;;;;;;;;;;;;
species road skills: [road_skill] ;;;;;;;;;;;19;11;18;11;;;;
[road_skill];;;;;;;;;;;;;;;;;;
list<road> peers ;;;;;;;;;;;1;6932;4;6932;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;1;6932;1;6932;;;;
-29;;;;;;;;;;;;;;;;;;
list<agent> all_agents ;;;;;;;;;;;2;6932;6;6932;;;;
list segment_lengths ;;;;;;;;;;;5;6932;4;6932;;;;
agent source_node ;;;;;;;;;;;2;6932;0;6932;;;;
float maxspeed <- (50 * #km) / #h ;;;;;;;;;;;10;6932;22;6932;;;;
(50 * #km) / #h;;;;;;;;;;;5;3466;4;3466;;;;
50 * #km;;;;;;;;;;;1;3466;2;3466;;;;
agent target_node ;;;;;;;;;;;3;6932;5;6932;;;;
list vehicle_ordering ;;;;;;;;;;;2;6932;5;6932;;;;
int num_segments ;;;;;;;;;;;1;6932;0;6932;;;;
list<list> agents_on ;;;;;;;;;;;1;6932;4;6932;;;;
int num_lanes <- 2 ;;;;;;;;;;;1;6932;6;6932;;;;
road linked_road ;;;;;;;;;;;2;6932;0;6932;;;;
-199;;;;;;;;;;;;;;;;;;
rgb color <- #white ;;;;;;;;;;;4;6932;7;6932;;;;
string oneway ;;;;;;;;;;;0;6932;3;6932;;;;
bool register (11 agent, 1 lane);;;;;;;;;;;;;;;;;;
bool unregister (11 agent);;;;;;;;;;;;;;;;;;
aspect base ;;;1033;117844;;;;;1063;118797;;;;;;;;
draw shape delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color end_arrow: 1 ;;;1002;117844;;;;;1021;118798;;;;;;;;
species intersection skills: [intersection_skill] ;;;;;;;;;;;28;11;27;11;;;;
[intersection_skill];;;;;;;;;;;;;;;;;;
list<intersection> peers ;;;;;;;;;;;2;3018;2;3018;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;1;3018;0;3018;;;;
-29;;;;;;;;;;;;;;;;;;
list<agent> roads_in ;;;;;;;;;;;0;3018;1;3018;;;;
map block ;;;;;;;;;;;1;3018;2;3018;;;;
list<list> stop ;;;;;;;;;;;1;3018;1;3018;;;;
list<agent> roads_out ;;;;;;;;;;;2;3018;0;3018;;;;
list<agent> priority_roads ;;;;;;;;;;;0;3018;1;3018;;;;
rgb color ;;;;;;;;;;;1;3018;2;3018;;;;
bool is_traffic_signal ;;;;;;;;;;;0;3018;0;3018;;;;
float time_to_change <- 30 * #sec ;;;;;;;;;;;2;3018;10;3018;;;;
30 * #sec;;;;;;;;;;;0;3018;1;3018;;;;
float counter <- rnd(time_to_change) ;;;;;;;;;;;5;3018;2;3018;;;;
rnd(time_to_change);;;;;;;;;;;5;3018;0;3018;;;;
list<road> ways1 ;;;;;;;;;;;1;3018;4;3018;;;;
list<road> ways2 ;;;;;;;;;;;1;3018;0;3018;;;;
bool is_green ;;;;;;;;;;;2;3018;1;3018;;;;
rgb color_fire ;;;;;;;;;;;0;3018;1;3018;;;;
action initialize ;;;;;;;;;;;12;3018;10;3018;;;;
if is_traffic_signal ;;;;;;;;;;;10;3018;9;3018;;;;
do compute_crossing ;;;;;;;;;;;6;98;6;98;;;;
add [] to: stop ;;;;;;;;;;;0;98;0;98;;;;
[];;;;;;;;;;;0;98;0;98;;;;
if flip(0.5) ;;;;;;;;;;;0;98;1;98;;;;
flip(0.5);;;;;;;;;;;0;98;0;98;;;;
else ;;;;;;;;;;;0;53;0;53;;;;
do to_red ;;;;;;;;;;;0;53;0;53;;;;
do to_green ;;;;;;;;;;;0;45;0;45;;;;
action compute_crossing ;;;;;;;;;;;6;98;6;98;;;;
if length(roads_in) >= 2 ;;;;;;;;;;;3;98;4;98;;;;
length(roads_in) >= 2;;;;;;;;;;;0;98;0;98;;;;
length(roads_in);;;;;;;;;;;0;98;0;98;;;;
let rd0 type: road value: road(roads_in[0]) ;;;;;;;;;;;0;95;1;95;;;;
road(roads_in[0]);;;;;;;;;;;0;95;1;95;;;;
roads_in[0];;;;;;;;;;;0;95;0;95;;;;
[0];;;;;;;;;;;0;95;0;95;;;;
let pts type: list<point> value: rd0.shape.points ;;;;;;;;;;;0;95;0;95;;;;
rd0.shape.points;;;;;;;;;;;0;95;0;95;;;;
rd0.shape;;;;;;;;;;;0;95;0;95;;;;
let ref_angle type: float value: direction_to(last(pts),rd0.location) ;;;;;;;;;;;1;95;0;95;;;;
direction_to(last(pts),rd0.location);;;;;;;;;;;1;95;0;95;;;;
last(pts);;;;;;;;;;;0;95;0;95;;;;
rd0.location;;;;;;;;;;;1;95;0;95;;;;
loop rd over: roads_in ;;;;;;;;;;;2;95;3;95;;;;
let pts2 type: list<point> value: road(rd).shape.points ;;;;;;;;;;;0;277;1;277;;;;
road(rd).shape.points;;;;;;;;;;;0;277;1;277;;;;
road(rd).shape;;;;;;;;;;;0;277;0;277;;;;
road(rd);;;;;;;;;;;0;277;0;277;;;;
let angle_dest type: float value: direction_to(last(pts2),rd.location) ;;;;;;;;;;;1;277;0;277;;;;
direction_to(last(pts2),rd.location);;;;;;;;;;;0;277;0;277;;;;
last(pts2);;;;;;;;;;;0;277;0;277;;;;
rd.location;;;;;;;;;;;0;277;0;277;;;;
let ang type: float value: abs(angle_dest - ref_angle) ;;;;;;;;;;;0;277;2;277;;;;
abs(angle_dest - ref_angle);;;;;;;;;;;0;277;2;277;;;;
angle_dest - ref_angle;;;;;;;;;;;0;277;0;277;;;;
if ((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315)) ;;;;;;;;;;;1;277;0;277;;;;
((ang > 45) and (ang < 135)) or ((ang > 225) and (ang < 315));;;;;;;;;;;1;277;0;277;;;;
(ang > 45) and (ang < 135);;;;;;;;;;;1;277;0;277;;;;
ang > 45;;;;;;;;;;;1;277;0;277;;;;
ang < 135;;;;;;;;;;;0;178;0;178;;;;
(ang > 225) and (ang < 315);;;;;;;;;;;0;210;0;210;;;;
ang > 225;;;;;;;;;;;0;210;0;210;;;;
ang < 315;;;;;;;;;;;0;17;0;17;;;;
add road(rd) to: ways2 ;;;;;;;;;;;0;84;0;84;;;;
road(rd);;;;;;;;;;;0;84;0;84;;;;
loop rd over: roads_in ;;;;;;;;;;;2;98;2;98;;;;
if not(rd in ways2) ;;;;;;;;;;;1;280;1;280;;;;
not(rd in ways2);;;;;;;;;;;0;280;0;280;;;;
rd in ways2;;;;;;;;;;;0;280;0;280;;;;
add road(rd) to: ways1 ;;;;;;;;;;;0;196;1;196;;;;
road(rd);;;;;;;;;;;0;196;0;196;;;;
action to_green ;;;;;;;;;;;0;45;0;45;;;;
put ways2 at: 0 to: stop ;;;;;;;;;;;0;45;0;45;;;;
set color_fire value: #green ;;;;;;;;;;;0;45;0;45;;;;
set is_green value: true ;;;;;;;;;;;0;45;0;45;;;;
action to_red ;;;;;;;;;;;0;53;0;53;;;;
put ways1 at: 0 to: stop ;;;;;;;;;;;0;53;0;53;;;;
set color_fire value: #red ;;;;;;;;;;;0;53;0;53;;;;
set is_green value: false ;;;;;;;;;;;0;53;0;53;;;;
reflex dynamic_node when: is_traffic_signal ;;;;;;;;;;;18;33198;10;33198;;;;
set counter value: counter + step ;;;;;;;;;;;1;1078;1;1078;;;;
counter + step;;;;;;;;;;;0;1078;0;1078;;;;
if counter >= time_to_change ;;;;;;;;;;;1;1078;1;1078;;;;
counter >= time_to_change;;;;;;;;;;;0;1078;1;1078;;;;
set counter value: 0.0 ;;;;;;;;;;;;;;;;;;
if is_green ;;;;;;;;;;;;;;;;;;
else ;;;;;;;;;;;;;;;;;;
do to_green ;;;;;;;;;;;;;;;;;;
do to_red ;;;;;;;;;;;;;;;;;;
aspect base ;;;1800;51306;;;;;1832;51306;;;;;;;;
if is_traffic_signal ;;;1770;51306;;;;;1797;51306;;;;;;;;
else ;;;1687;49640;;;;;1706;49640;;;;;;;;
draw circle(float(1)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color ;;;1661;49640;;;;;1672;49640;;;;;;;;
circle(float(1));;;1170;49640;;;;;1195;49640;;;;;;;;
float(1);;;30;49640;;;;;35;49640;;;;;;;;
draw triangle(float(30)) delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 color: color_fire ;;;10;1666;;;;;20;1666;;;;;;;;
triangle(float(30));;;2;1666;;;;;4;1666;;;;;;;;
float(30);;;1;1666;;;;;2;1666;;;;;;;;
species base_vehicle skills: [driving] ;;;;;;;;;;;0;11;0;11;;;;
[driving];;;;;;;;;;;;;;;;;;
list<base_vehicle> peers ;;;;;;;;;;;;;;;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;;;;;;;;
-29;;;;;;;;;;;;;;;;;;
float real_speed <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
float heading <- rnd(360.0) ;;;;;;;;;;;0;20;0;20;;;;
rnd(360.0);;;;;;;;;;;0;20;0;20;;;;
point destination ;;;;;;;;;;;0;20;0;20;;;;
point location ;;;;;;;;;;;;;;;;;;
path current_path <- nil ;;;;;;;;;;;0;20;0;20;;;;
geometry current_edge <- nil ;;;;;;;;;;;0;20;0;20;;;;
float speed <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
float proba_use_linked_road <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
list<point> targets <- [] ;;;;;;;;;;;0;20;0;20;;;;
[];;;;;;;;;;;0;60;0;60;;;;
float security_distance_coeff <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
float proba_lane_change_up <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
float leading_speed <- nil ;;;;;;;;;;;0;20;0;20;;;;
float min_security_distance <- 0.5 ;;;;;;;;;;;0;20;0;20;;;;
float leading_distance <- nil ;;;;;;;;;;;0;20;0;20;;;;
float proba_lane_change_down <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
float proba_respect_priorities <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
list<float> proba_respect_stops <- [] ;;;;;;;;;;;0;20;1;20;;;;
[];;;;;;;;;;;0;60;0;60;;;;
float min_safety_distance <- 0.5 ;;;;;;;;;;;0;20;0;20;;;;
agent follower <- nil ;;;;;;;;;;;0;20;0;20;;;;
agent leading_vehicle <- nil ;;;;;;;;;;;0;20;0;20;;;;
int current_lane <- 0 ;;;;;;;;;;;0;20;0;20;;;;
float speed_coeff <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
float time_since_lane_change <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
bool violating_oneway <- false ;;;;;;;;;;;0;20;0;20;;;;
int segment_index_on_road <- -1 ;;;;;;;;;;;0;20;0;20;;;;
-1;;;;;;;;;;;0;40;0;40;;;;
int lowest_lane <- 0 ;;;;;;;;;;;0;20;0;20;;;;
int lane_change_limit <- 1 ;;;;;;;;;;;0;20;0;20;;;;
float acc_gain_threshold <- 0.2 ;;;;;;;;;;;0;20;0;20;;;;
float acc_bias <- 0.25 ;;;;;;;;;;;0;20;0;20;;;;
float safety_distance_coeff <- 1.0 ;;;;;;;;;;;0;20;0;20;;;;
int linked_lane_limit <- -1 ;;;;;;;;;;;0;20;0;20;;;;
-1;;;;;;;;;;;0;40;0;40;;;;
float time_headway <- 1.5 ;;;;;;;;;;;0;20;0;20;;;;
float politeness_factor <- 0.5 ;;;;;;;;;;;0;20;0;20;;;;
float distance_to_goal <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
float max_speed <- 50.0 ;;;;;;;;;;;0;20;0;20;;;;
int num_lanes_occupied <- 1 ;;;;;;;;;;;0;20;0;20;;;;
int current_index <- 0 ;;;;;;;;;;;0;20;0;20;;;;
float delta_idm <- 4.0 ;;;;;;;;;;;0;20;0;20;;;;
agent next_road <- nil ;;;;;;;;;;;0;20;0;20;;;;
agent current_road <- nil ;;;;;;;;;;;0;20;0;20;;;;
bool using_linked_road <- false ;;;;;;;;;;;0;20;0;20;;;;
agent current_target <- nil ;;;;;;;;;;;0;20;0;20;;;;
float distance_to_current_target <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
float max_deceleration <- 3.0 ;;;;;;;;;;;0;20;0;20;;;;
float max_safe_deceleration <- 4 ;;;;;;;;;;;0;20;0;20;;;;
float max_acceleration <- 0.3 ;;;;;;;;;;;0;20;0;20;;;;
list<unknown> allowed_lanes <- [] ;;;;;;;;;;;0;20;0;20;;;;
[];;;;;;;;;;;0;60;0;60;;;;
float lane_change_cooldown <- 4 ;;;;;;;;;;;0;20;0;20;;;;
float acceleration <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
bool ignore_oneway <- false ;;;;;;;;;;;0;20;0;20;;;;
bool on_linked_road <- false ;;;;;;;;;;;0;20;0;20;;;;
float vehicle_length <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
bool right_side_driving <- true ;;;;;;;;;;;0;20;0;20;;;;
agent final_target <- nil ;;;;;;;;;;;0;20;0;20;;;;
float proba_block_node <- 0.0 ;;;;;;;;;;;0;20;0;20;;;;
rgb color ;;;;;;;;;;;0;20;0;20;;;;
graph road_graph ;;;;;;;;;;;0;20;0;20;;;;
point pos ;;;;;;;;;;;0;20;0;20;;;;
bool entregado <- false ;;;;;;;;;;;0;20;0;20;;;;
string operador ;;;;;;;;;;;0;20;0;20;;;;
int num <- rnd(50) ;;;;;;;;;;;0;20;0;20;;;;
rnd(50);;;;;;;;;;;0;20;0;20;;;;
path follow (2 speed, 17 path, 10 move_weights, 3 return_path);;;;;;;;;;;;;;;;;;
path goto (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 10 move_weights);;;;;;;;;;;;;;;;;;
path move (2 speed, 2 heading, 13 bounds);;;;;;;;;;;;;;;;;;
bool wander (2 speed, 2 amplitude, 13 bounds, 15 on, 10 proba_edges);;;;;;;;;;;;;;;;;;
bool test_next_road (11 new_road);;;;;;;;;;;;;;;;;;
float speed_choice (11 new_road);;;;;;;;;;;;;;;;;;
float external_factor_impact (11 new_road, 2 remaining_time);;;;;;;;;;;;;;;;;;
bool drive_random (15 graph, 10 proba_roads);;;;;;;;;;;;;;;;;;
path path_from_nodes (15 graph, 5 nodes);;;;;;;;;;;;;;;;;;
int lane_choice (11 new_road);;;;;;;;;;;;;;;;;;
int choose_lane (11 new_road);;;;;;;;;;;;;;;;;;
path compute_path (15 graph, 11 target, 11 source, 5 nodes);;;;;;;;;;;31;20;32;20;;;;
bool drive ;;;;;;;;;;;13;220;21;220;;;;
bool unregister ;;;;;;;;;;;;;;;;;;
float advanced_follow_driving (17 path, 7 target, 2 speed, 2 time);;;;;;;;;;;;;;;;;;
action on_entering_new_road ;;;;;;;;;;;;;;;;;;
float force_move (1 lane, 2 acceleration, 2 time);;;;;;;;;;;;;;;;;;
path goto_drive (13 target, 2 speed, 0 on, 3 recompute_path, 3 return_path, 17 following);;;;;;;;;;;;;;;;;;
bool ready_to_cross (11 node, 11 new_road);;;;;;;;;;;;;;;;;;
point compute_position ;;;3;200;;;;;8;200;;;;;;;;
if current_road != nil ;;;3;200;;;;;8;200;;;;;;;;
current_road != nil;;;0;200;;;;;0;200;;;;;;;;
else ;;;;;;;;;;;;;;;;;;
return point(0,0) ;;;;;;;;;;;;;;;;;;
point(0,0);;;;;;;;;;;;;;;;;;
let dist type: float value: (((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width ;;;2;200;;;;;4;200;;;;;;;;
(((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5) * lane_width;;;2;200;;;;;4;200;;;;;;;;
((road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1))) - 0.5;;;0;200;;;;;4;200;;;;;;;;
(road(current_road).num_lanes - current_lane) - mean(range(num_lanes_occupied - 1));;;0;200;;;;;4;200;;;;;;;;
road(current_road).num_lanes - current_lane;;;0;200;;;;;2;200;;;;;;;;
road(current_road).num_lanes;;;0;200;;;;;2;200;;;;;;;;
road(current_road);;;0;200;;;;;2;200;;;;;;;;
mean(range(num_lanes_occupied - 1));;;0;200;;;;;2;200;;;;;;;;
range(num_lanes_occupied - 1);;;0;200;;;;;1;200;;;;;;;;
num_lanes_occupied - 1;;;0;200;;;;;0;200;;;;;;;;
if violating_oneway ;;;0;200;;;;;0;200;;;;;;;;
set dist value: -dist ;;;;;;;;;;;;;;;;;;
-dist;;;;;;;;;;;;;;;;;;
let shift_pt type: point value: point(cos(heading + 90) * dist,sin(heading + 90) * dist) ;;;1;200;;;;;2;200;;;;;;;;
point(cos(heading + 90) * dist,sin(heading + 90) * dist);;;1;200;;;;;2;200;;;;;;;;
cos(heading + 90) * dist;;;1;200;;;;;2;200;;;;;;;;
cos(heading + 90);;;0;200;;;;;2;200;;;;;;;;
heading + 90;;;0;200;;;;;1;200;;;;;;;;
sin(heading + 90) * dist;;;0;200;;;;;0;200;;;;;;;;
sin(heading + 90);;;0;200;;;;;0;200;;;;;;;;
heading + 90;;;0;200;;;;;0;200;;;;;;;;
return location + shift_pt ;;;0;200;;;;;0;200;;;;;;;;
location + shift_pt;;;0;200;;;;;0;200;;;;;;;;
aspect base ;;;17;340;;;;;19;340;;;;;;;;
if current_road != nil ;;;17;340;;;;;19;340;;;;;;;;
current_road != nil;;;1;340;;;;;0;340;;;;;;;;
set pos value: self.compute_position() ;;;3;200;;;;;9;200;;;;;;;;
self.compute_position();;;;;;;;;;;;;;;;;;
draw rectangle(float(20),float(40)) border: #black delegate: msi.gaml.statements.draw.ShapeDrawer@337fd5e4 rotate: heading + 90 color: #yellow ;;;13;200;;;;;10;200;;;;;;;;
heading + 90;;;0;200;;;;;0;200;;;;;;;;
rectangle(float(20),float(40));;;0;200;;;;;1;200;;;;;;;;
float(20);;;0;200;;;;;0;200;;;;;;;;
float(40);;;0;200;;;;;0;200;;;;;;;;
species vehicle_following_path parent: base_vehicle ;;;;;;;;;;;50;11;57;11;;;;
list<vehicle_following_path> peers ;;;;;;;;;;;0;20;0;20;;;;
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;0;20;0;20;;;;
-29;;;;;;;;;;;;;;;;;;
point location ;;;;;;;;;;;0;20;0;20;;;;
float timer <- 0.0 * #minute ;;;;;;;;;;;0;20;0;20;;;;
0.0 * #minute;;;;;;;;;;;0;20;0;20;;;;
float vehicle_max_speed ;;;;;;;;;;;0;20;0;20;;;;
point destinoFinal <- pedidos[32] ;;;;;;;;;;;0;20;0;20;;;;
pedidos[32];;;;;;;;;;;0;20;0;20;;;;
[32];;;;;;;;;;;0;20;0;20;;;;
init ;;;;;;;;;;;0;20;0;20;;;;
set vehicle_length value: 1.9 * #m ;;;;;;;;;;;0;20;0;20;;;;
1.9 * #m;;;;;;;;;;;0;20;0;20;;;;
if rain ;;;;;;;;;;;0;20;0;20;;;;
else ;;;;;;;;;;;0;20;0;20;;;;
set max_speed value: 50 / 3600 ;;;;;;;;;;;0;20;0;20;;;;
50 / 3600;;;;;;;;;;;0;20;0;20;;;;
set max_speed value: 40 / 3600 ;;;;;;;;;;;;;;;;;;
40 / 3600;;;;;;;;;;;;;;;;;;
set max_acceleration value: 3.5 ;;;;;;;;;;;0;20;0;20;;;;
reflex select_next_path when: current_path = nil ;;;;;;;;;;;33;220;33;220;;;;
current_path = nil;;;;;;;;;;;0;220;0;220;;;;
set dst_nodes value: [intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)] ;;;;;;;;;;;1;20;1;20;;;;
[intersection[rnd(3017)],intersection(restaurantes[rnd(8)]),intersection(destinoFinal)];;;;;;;;;;;1;20;1;20;;;;
intersection[rnd(3017)];;;;;;;;;;;0;20;0;20;;;;
[rnd(3017)];;;;;;;;;;;0;20;0;20;;;;
rnd(3017);;;;;;;;;;;0;20;0;20;;;;
intersection(restaurantes[rnd(8)]);;;;;;;;;;;0;20;0;20;;;;
restaurantes[rnd(8)];;;;;;;;;;;0;20;0;20;;;;
[rnd(8)];;;;;;;;;;;0;20;0;20;;;;
rnd(8);;;;;;;;;;;0;20;0;20;;;;
intersection(destinoFinal);;;;;;;;;;;1;20;1;20;;;;
do compute_path (nodes:dst_nodes, graph:road_network);;;;;;;;;;;32;20;32;20;;;;
reflex commute when: current_path != nil ;;;;;;;;;;;17;220;23;220;;;;
current_path != nil;;;;;;;;;;;1;220;0;220;;;;
do drive ;;;;;;;;;;;14;220;21;220;;;;
set timer value: timer + step ;;;;;;;;;;;2;220;2;220;;;;
timer + step;;;;;;;;;;;1;220;1;220;;;;
reflex stop when: current_path = nil ;;;;;;;;;;;0;220;0;220;;;;
current_path = nil;;;;;;;;;;;0;220;0;220;;;;
let t_final type: int value: int(timer / 60) ;;;;;;;;;;;;;;;;;;
int(timer / 60);;;;;;;;;;;;;;;;;;
timer / 60;;;;;;;;;;;;;;;;;;
if t_final > 30 ;;;;;;;;;;;;;;;;;;
t_final > 30;;;;;;;;;;;;;;;;;;
else ;;;;;;;;;;;;;;;;;;
set pedidosEntregados value: pedidosEntregados + 1 ;;;;;;;;;;;;;;;;;;
pedidosEntregados + 1;;;;;;;;;;;;;;;;;;
write ('Tiempo: ' + t_final) + ' minutos' ;;;;;;;;;;;;;;;;;;
('Tiempo: ' + t_final) + ' minutos';;;;;;;;;;;;;;;;;;
'Tiempo: ' + t_final;;;;;;;;;;;;;;;;;;
set pedidosNoEntregados value: pedidosNoEntregados + 1 ;;;;;;;;;;;;;;;;;;
pedidosNoEntregados + 1;;;;;;;;;;;;;;;;;;
write 'Pedido no entregado' ;;;;;;;;;;;;;;;;;;
set vehiculos value: vehiculos - 1 ;;;;;;;;;;;;;;;;;;
vehiculos - 1;;;;;;;;;;;;;;;;;;
do die ;;;;;;;;;;;;;;;;;;
init ;;;;;;;;;;;311;1;376;1;;;;
create road from: shp_roads with: [num_lanes::int(read('lanes'))];;;;;;;;;;;335;3467;424;3467;;;;
create road ;;;;;;;;;;;187;6932;226;6932;;;;
set num_lanes value: myself.num_lanes ;;;;;;;;;;;5;3466;10;3466;;;;
myself.num_lanes;;;;;;;;;;;2;3466;8;3466;;;;
set shape value: polyline(reverse(myself.shape.points)) ;;;;;;;;;;;19;3466;21;3466;;;;
polyline(reverse(myself.shape.points));;;;;;;;;;;10;3466;5;3466;;;;
reverse(myself.shape.points);;;;;;;;;;;8;3466;5;3466;;;;
myself.shape.points;;;;;;;;;;;4;3466;3;3466;;;;
myself.shape;;;;;;;;;;;0;3466;3;3466;;;;
set maxspeed value: myself.maxspeed ;;;;;;;;;;;5;3466;7;3466;;;;
myself.maxspeed;;;;;;;;;;;3;3466;5;3466;;;;
set linked_road value: myself ;;;;;;;;;;;7;3466;2;3466;;;;
set myself.linked_road value: self ;;;;;;;;;;;8;3466;5;3466;;;;
myself.linked_road;;;;;;;;;;;;;;;;;;
create intersection from: shp_nodes with: [is_traffic_signal::read('type') = 'traffic_signals'];;;;;;;;;;;69;3019;85;3019;;;;
set time_to_change value: 260 * #sec ;;;;;;;;;;;1;3018;3;3018;;;;
260 * #sec;;;;;;;;;;;0;3018;1;3018;;;;
create restaurant from: restaurants_csv with: [lon::float(get('longitude')), nombre::string(get('location_name')), lat::float(get('latitude'))];;;;;;;;;;;4;10;2;10;;;;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;;;;;;;;;;0;9;0;9;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;;;;;;;;;;0;9;0;9;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;;;;;;;;;;0;9;0;9;;;;
point(lon,lat);;;;;;;;;;;0;9;0;9;;;;
add location to: restaurantes ;;;;;;;;;;;1;9;0;9;;;;
create pedido from: pedidos_csv with: [lon::float(get('lon')), lat::float(get('lat'))];;;;;;;;;;;2;34;3;34;;;;
set location value: to_GAMA_CRS(point(lon,lat),'EPSG:4326').location ;;;;;;;;;;;1;33;1;33;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326').location;;;;;;;;;;;1;33;0;33;;;;
to_GAMA_CRS(point(lon,lat),'EPSG:4326');;;;;;;;;;;0;33;0;33;;;;
point(lon,lat);;;;;;;;;;;0;33;0;33;;;;
add location to: pedidos ;;;;;;;;;;;0;33;0;33;;;;
let edge_weights type: map value: road as_map (each :: each.shape.perimeter) ;;;;;;;;;;;7;1;8;1;;;;
road as_map (each :: each.shape.perimeter);;;;;;;;;;;7;1;8;1;;;;
each :: each.shape.perimeter;;;;;;;;;;;;;;;;;;
each.shape.perimeter;;;;;;;;;;;6;6932;3;6932;;;;
each.shape;;;;;;;;;;;4;6932;1;6932;;;;
set road_network value: with_weights(as_driving_graph(road,intersection),edge_weights) ;;;;;;;;;;;18;1;21;1;;;;
with_weights(as_driving_graph(road,intersection),edge_weights);;;;;;;;;;;18;1;21;1;;;;
as_driving_graph(road,intersection);;;;;;;;;;;16;1;19;1;;;;
ask intersection ;;;;;;;;;;;27;3019;24;3019;;;;
do initialize ;;;;;;;;;;;13;3018;11;3018;;;;
create vehicle_following_path number: vehiculos with: [vehicle_max_speed::vehicle_speed_limit];;;;;;;;;;;1;1;2;1;;;;
experiment 'city_rain' type: 'gui' title: 'Experiment city_rain' benchmark: true ;;;;;;;;;;;;;;;;;;
list<city_rain> peers ;;;;;;;;;;;;;;;;;0;1
-199;;;;;;;;;;;;;;;;;;
FollowingPaths_model host ;;;;;;;;;;;;;;;;;0;1
-29;;;;;;;;;;;;;;;;;;
list<FollowingPaths_model> simulations ;;;;;;;;;;;;;;;;;0;1
-27;;;;;;;;;;;;;;;;;;
FollowingPaths_model simulation ;;;;;;;;;;;;;;;;;0;1
-27;;;;;;;;;;;;;;;;;;
float seedValue <- 10.0 ;;;;;;;;;;;;;;;;;0;1
float seed <- seedValue ;;;;;;;;;;;;;;;;;0;1
init ;;;;;;;675;1;;;;;;;;;;
create simulation with: [seed::seedValue];;;;;;;675;1;;;;;;;;;;
reflex end_of_runs ;;;;;;;56;11;;;;;;;;;;
let cpt type: int value: 0 ;;;;;;;0;11;;;;;;;;;;
let cpt_n type: int value: 0 ;;;;;;;0;11;;;;;;;;;;
ask simulations ;;;;;;;112;33;;;;;;;;;;
save [pedidosNoEntregados,pedidosEntregados] format: 'csv' to: 'save_data.csv' ;;;;;;;56;22;;;;;;;;;;
[pedidosNoEntregados,pedidosEntregados];;;;;;;0;22;;;;;;;;;;
parameter 'rain' <- false var: rain ;;;;;;;;;;;;;;;;;;
output synchronized: true ;;;;;;;;;;;;;;;;;;
display 'map' type: '2d' background: rain ? #green : #grey ;0;11;;;0;11;;;;;1;2;2;2;;;;
rain ? #green : #grey;0;14;;;0;15;;;;;;;;;;;;
#green : #grey;;;;;;;;;;;;;;;;;;
species road aspect: base ;0;13;;;0;13;;;;;;;;;;;;
species vehicle_following_path aspect: base ;0;13;;;0;13;;;;;;;;;;;;
species intersection aspect: base ;0;13;;;0;13;;;;;;;;;;;;
species restaurant aspect: base ;0;13;;;0;13;;;;;;;;;;;;
species pedido aspect: base ;0;13;;;0;13;;;;;;;;;;;;
permanent ;;;;;;;;;;;;;;;;;;
display 'chart_display' refresh: every(10 * #cycle) type: '2d' ;;;;;;;5;2;;;;;;;0;1;;
every(10 * #cycle);;;;;;;;;;;;;;;0;21;;
10 * #cycle;;;;;;;;;;;;;;;0;21;;
chart 'Entrega de Pedidos' position: point(0,0) type: series size: point(1,0.5) ;;;;;;;;;;;;;;;4;3;;
point(0,0);;;;;;;;;;;;;;;;;;
point(1,0.5);;;;;;;;;;;;;;;;;;
data 'Pedidos' style: line color: #green value: pedidosEntregados ;;;;;;;;;;;;;;;0;1;;
data 'Pedidos No entregados' style: line color: #red value: pedidosNoEntregados ;;;;;;;;;;;;;;;0;1;;
